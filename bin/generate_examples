#!/usr/bin/env ruby

require "date"
$LOAD_PATH.unshift File.expand_path("../lib", __dir__)
require "heatmap-builder"

EXAMPLES_DIR = File.expand_path("../examples", __dir__)

def example_path(filename)
  File.join(EXAMPLES_DIR, filename)
end

def generate_example(filename, description, &block)
  puts "Generating #{description}..."

  filepath = example_path(filename)
  puts File.basename(filepath)

  if File.exist?(filepath)
    puts "skipped - already exists"
  else
    svg = block.call
    File.write(filepath, svg)
    puts "created"
  end

  puts
end

def generate_sample_svgs
  Dir.mkdir(EXAMPLES_DIR) unless Dir.exist?(EXAMPLES_DIR)

  weekly_scores = [0, 1, 3, 2, 4, 1, 0]
  generate_example("weekly_progress.svg", "basic weekly progress") do
    HeatmapBuilder.generate(weekly_scores, cell_size: 18)
  end

  large_cell_scores = [1, 2, 3, 4, 5, 6, 7]
  generate_example("large_cells.svg", "large cells example") do
    HeatmapBuilder.generate(large_cell_scores, {
      cell_size: 35,
      cell_spacing: 1,
      font_size: 20
    })
  end

  puts "Generating linear heatmaps with different palettes..."
  puts

  linear_scores = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

  generate_example("linear_github_green.svg", "linear with GitHub Green palette") do
    HeatmapBuilder.build_linear(linear_scores, {
      colors: HeatmapBuilder::GITHUB_GREEN,
      cell_size: 18
    })
  end

  generate_example("linear_blue_ocean.svg", "linear with Blue Ocean palette") do
    HeatmapBuilder.build_linear(linear_scores, {
      colors: HeatmapBuilder::BLUE_OCEAN,
      cell_size: 18
    })
  end

  generate_example("linear_warm_sunset.svg", "linear with Warm Sunset palette") do
    HeatmapBuilder.build_linear(linear_scores, {
      colors: HeatmapBuilder::WARM_SUNSET,
      cell_size: 18
    })
  end

  generate_example("linear_purple_vibes.svg", "linear with Purple Vibes palette") do
    HeatmapBuilder.build_linear(linear_scores, {
      colors: HeatmapBuilder::PURPLE_VIBES,
      cell_size: 18
    })
  end

  generate_example("linear_red_to_green.svg", "linear with Red to Green palette") do
    HeatmapBuilder.build_linear(linear_scores, {
      colors: HeatmapBuilder::RED_TO_GREEN,
      cell_size: 18
    })
  end

  calendar_data = sample_calendar_data

  generate_example("calendar_github_style.svg", "GitHub-style calendar") do
    HeatmapBuilder.build_calendar(calendar_data, {
      cell_size: 14,
      month_spacing: 0
    })
  end

  generate_example("calendar_default.svg", "default colors calendar") do
    HeatmapBuilder.build_calendar(calendar_data, {
      cell_size: 14,
      month_spacing: 0
    })
  end

  generate_example("calendar_blue_ocean.svg", "calendar with Blue Ocean palette") do
    HeatmapBuilder.build_calendar(calendar_data, {
      colors: HeatmapBuilder::BLUE_OCEAN,
      cell_size: 14,
      month_spacing: 0
    })
  end

  generate_example("calendar_warm_sunset.svg", "calendar with Warm Sunset palette") do
    HeatmapBuilder.build_calendar(calendar_data, {
      colors: HeatmapBuilder::WARM_SUNSET,
      cell_size: 14,
      month_spacing: 0
    })
  end

  generate_example("calendar_purple_vibes.svg", "calendar with Purple Vibes palette") do
    HeatmapBuilder.build_calendar(calendar_data, {
      colors: HeatmapBuilder::PURPLE_VIBES,
      cell_size: 14,
      month_spacing: 0
    })
  end

  generate_example("calendar_red_to_green.svg", "calendar with Red to Green palette") do
    HeatmapBuilder.build_calendar(calendar_data, {
      colors: HeatmapBuilder::RED_TO_GREEN,
      cell_size: 14,
      month_spacing: 0
    })
  end

  generate_example("calendar_sunday_start.svg", "calendar with Sunday start") do
    HeatmapBuilder.build_calendar(calendar_data, {
      cell_size: 14,
      start_of_week: :sunday,
      month_spacing: 0
    })
  end

  generate_example("calendar_with_outside_cells.svg", "calendar with outside cells") do
    HeatmapBuilder.build_calendar(calendar_data, {
      cell_size: 14,
      show_outside_cells: true,
      month_spacing: 0
    })
  end

  generate_example("linear_rounded_corners.svg", "linear with rounded corners") do
    HeatmapBuilder.build_linear(linear_scores, {
      colors: HeatmapBuilder::GITHUB_GREEN,
      cell_size: 18,
      corner_radius: 2
    })
  end

  generate_example("linear_rounded_corners_max_radius.svg", "linear with rounded corners (max radius)") do
    HeatmapBuilder.build_linear(linear_scores, {
      colors: HeatmapBuilder::GITHUB_GREEN,
      cell_size: 18,
      corner_radius: 9
    })
  end

  generate_example("calendar_rounded_corners.svg", "calendar with rounded corners") do
    HeatmapBuilder.build_calendar(calendar_data, {
      cell_size: 14,
      corner_radius: 2,
      month_spacing: 0
    })
  end

  generate_example("calendar_rounded_corners_max_radius.svg", "calendar with rounded corners (max radius)") do
    HeatmapBuilder.build_calendar(calendar_data, {
      cell_size: 14,
      corner_radius: 7,
      month_spacing: 0
    })
  end

  puts "Done"
end

def sample_calendar_data
  srand(42)

  current_year = Date.today.year
  start_date = Date.new(current_year, 1, 1)
  end_date = Date.new(current_year, 12, 31)

  (start_date..end_date).each_with_object({}) do |date, data|
    day_of_year = date.yday
    seasonal_factor = Math.sin((day_of_year - 80) * Math::PI / 362.0 / 2) # Peak in summer
    base_score = (seasonal_factor * 1.5 + 2).round

    score = rand(0..base_score)
    score = score / 2 if [0, 6].include?(date.wday) # Weekend reduction

    data[date.to_s] = score
  end
end

if __FILE__ == $0
  generate_sample_svgs
end
